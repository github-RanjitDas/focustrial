import dependencies.Exclusions

task testDebugUnitTestCoverage(type: JacocoReport) {
    group = 'Reporting'
    description = "Generate Jacoco coverage reports for the debug build. Only unit tests."

    //Make sure that tests from all modules are run before coverage report
    dependsOn ":presentation:testDebugUnitTest"
    dependsOn ":domain:testDebugUnitTest"
    dependsOn ":data:testDebugUnitTest"
    dependsOn ":database:testDebugUnitTest"

    classDirectories.from = files([
            fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", exclude: Exclusions.sonarqube),
            fileTree(dir: "$project.rootDir/presentation/build/intermediates/javac/debug", exclude: Exclusions.sonarqube),
            fileTree(dir: "$project.rootDir/domain/build/classes", exclude: Exclusions.sonarqube),
            fileTree(dir: "$project.rootDir/data/build/classes", exclude: Exclusions.sonarqube),
            fileTree(dir: "$project.rootDir/database/build/classes", exclude: Exclusions.sonarqube)
    ])

    def coverageSourceDirs = [
            "$project.rootDir/presentation/src/main/java",
            "$project.rootDir/domain/src/main/java",
            "$project.rootDir/data/src/main/java",
            "$project.rootDir/database/src/main/java"
    ]

    additionalSourceDirs.from = files(coverageSourceDirs)
    sourceDirectories.from = files(coverageSourceDirs)
    executionData.from = fileTree(dir: project.rootDir, include: [
            'presentation/build/jacoco/testDebugUnitTest.exec',
            'domain/build/jacoco/testDebugUnitTest.exec',
            'data/build/jacoco/testDebugUnitTest.exec',
            'database/build/jacoco/testDebugUnitTest.exec'
    ])

    reports {
        xml.enabled = true
        html.enabled = true
    }
}
