apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'
apply from: '../jacoco.gradle'
apply from: '../pitest-exceptions.gradle'
apply plugin: 'dagger.hilt.android.plugin'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.buildVersion
        versionName "$rootProject.ext.major.$rootProject.ext.minor.$rootProject.ext.patch"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            debuggable true
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        animationsDisabled = true
        unitTests.returnDefaultValues = true
        unitTests.all {
            useJUnitPlatform()
            jacoco {
                destinationFile = file("$buildDir/jacoco/testDebugUnitTest.exec")
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    buildFeatures {
        viewBinding true
    }

    kotlinOptions {
        jvmTarget = rootProject.ext.jvmTarget
    }

    ndkVersion "21.0.6113669"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.appcompat:appcompat:$app_compat_version"
    implementation "androidx.core:core-ktx:$ktx_version"
    implementation "androidx.constraintlayout:constraintlayout:$constrain_layout_version"
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"

    //Espresso Idling Resource
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:$espresso_version"
    implementation "androidx.test.espresso:espresso-idling-resource:$espresso_version"

    //Material
    api "com.google.android.material:material:$android_material_version"

    // ViewModel and LiveData
    api "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    // Dagger2 core
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    // Dagger Android
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    // Lottie
    implementation "com.airbnb.android:lottie:$lottieVersion"

    // Junit5
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5_version"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:$junit5_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit5_version"

    //AndroidX test
    androidTestImplementation "androidx.test:runner:$androidx_test_version"
    androidTestImplementation "androidx.test:rules:$androidx_test_version"
    androidTestImplementation "androidx.test.ext:junit:$junit_ext_version"

    //VLC player
    implementation "com.github.masterwok:libvlc-android-sdk:$libvlc_android_sdk_version"

    // Mock
    testImplementation "io.mockk:mockk:$mockk_version"

    //Recycler
    implementation "androidx.recyclerview:recyclerview:$recycker_version"

    //Kotlin Coroutines
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutine_android_version"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutine_core_version"

    //Coroutines-test
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_test_version"

    // PDF Viewer
    implementation "com.github.barteksc:android-pdf-viewer:$pdf_viewer_version"

    //Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
    kapt "androidx.hilt:hilt-compiler:$hilt_jetpack_version"
    implementation "androidx.fragment:fragment-ktx:$fragment_ktx_version"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$hilt_jetpack_version"
    kaptTest "com.google.dagger:hilt-android-compiler:$hilt_version"
    testImplementation "com.google.dagger:hilt-android-testing:$hilt_version"

    //Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"

    //Commons
    implementation 'com.safefleet.mobile:android-commons:1.0.0-SNAPSHOT@aar'
    implementation 'com.safefleet.mobile:safefleet-ui:1.0.0-SNAPSHOT@aar'

    implementation project(path: ':domain')
}

pitest {
    //Add Inspection exclusions since IntelliJ is sending invalid warnings for pitest plugin
    //noinspection GrFinalVariableAccess,GroovyAccessibility
    targetClasses = ["com.lawmobile.presentation.*"]
    //noinspection GrFinalVariableAccess,GroovyAccessibility
    targetTests = ["com.lawmobile.presentation.*"]
    //noinspection GrFinalVariableAccess,GroovyAccessibility
    excludedClasses = pitestExclusions
}
