import dependencies.AppConfig
import dependencies.Build
import dependencies.Dependencies
import dependencies.Modules

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.squareup.sqldelight'
    id 'newrelic'
    id 'com.google.firebase.appdistribution'
}

check.dependsOn ktlint

android {
    compileSdkVersion AppConfig.compileSdkVersion

    defaultConfig {
        applicationId AppConfig.applicationId
        minSdkVersion AppConfig.minSdkVersion
        targetSdkVersion AppConfig.targetSdkVersion
        versionCode AppConfig.buildVersion
        versionName AppConfig.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    packagingOptions {
        pickFirst '**/*.so'
    }

    signingConfigs {
        release {
            storeFile file(RELEASE_STORE_FILE)
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEYSTORE_ALIAS")
            keyPassword System.getenv("KEYSTORE_PASSWORD")
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            buildConfigField Build.STRING_TYPE, Build.VALIDATE_USER_URL_FIELD, Build.VALIDATE_USER_URL_RELEASE_VALUE
            buildConfigField Build.STRING_TYPE, Build.DISCOVERY_URL_FIELD, Build.DISCOVERY_URL_RELEASE_VALUE

            manifestPlaceholders = [
                    'appAuthRedirectScheme': Build.SSO_CALLBACK_VALUE
            ]
        }

        staging {
            initWith debug
            firebaseAppDistribution {
                artifactType="APK"
                appId="1:189561416446:android:6fa7154eae0824aef813af"
                serviceCredentialsFile="app/src/staging/fma-distribution.json"
                groups="Perficient"
            }

            buildConfigField Build.STRING_TYPE, Build.VALIDATE_USER_URL_FIELD, Build.VALIDATE_USER_URL_STAGING_VALUE
            buildConfigField Build.STRING_TYPE, Build.DISCOVERY_URL_FIELD, Build.DISCOVERY_URL_STAGING_VALUE

            manifestPlaceholders = [
                    'appAuthRedirectScheme': Build.SSO_CALLBACK_VALUE
            ]
        }

        qaTest {
            initWith debug
            firebaseAppDistribution {
                artifactType="APK"
                appId="1:608657564588:android:364a8d74bf5e16030e1009"
                serviceCredentialsFile="app/src/qaTest/fma-distribution.json"
                groups="Perficient"
            }

            buildConfigField Build.STRING_TYPE, Build.VALIDATE_USER_URL_FIELD, Build.VALIDATE_USER_URL_QATEST_VALUE
            buildConfigField Build.STRING_TYPE, Build.DISCOVERY_URL_FIELD, Build.DISCOVERY_URL_QATEST_VALUE

            manifestPlaceholders = [
                    'appAuthRedirectScheme': Build.SSO_CALLBACK_VALUE
            ]
        }

        debug {
            testCoverageEnabled true
            debuggable true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            firebaseAppDistribution {
                artifactType="APK"
                appId="1:287818701608:android:269f4522720e50b5ed8e1d"
                serviceCredentialsFile="app/src/debug/fma-distribution.json"
                groups="Perficient"
            }

            buildConfigField Build.STRING_TYPE, Build.VALIDATE_USER_URL_FIELD, Build.VALIDATE_USER_URL_DEBUG_VALUE
            buildConfigField Build.STRING_TYPE, Build.DISCOVERY_URL_FIELD, Build.DISCOVERY_URL_DEBUG_VALUE

            manifestPlaceholders = [
                    'appAuthRedirectScheme': Build.SSO_CALLBACK_VALUE
            ]
        }
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled = true
        unitTests {
            includeAndroidResources = true
        }
    }

    kotlinOptions {
        jvmTarget = AppConfig.jvmTarget
    }

    configurations.all {
        resolutionStrategy.force Dependencies.Google.findBugs
        resolutionStrategy {
            eachDependency { details ->
                if ('org.jacoco' == details.requested.group) {
                    details.useVersion "0.8.8"
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility AppConfig.jvmTarget
        targetCompatibility AppConfig.jvmTarget
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation Dependencies.Kotlin.standardLibrary
    implementation Dependencies.AppCompat.appCompat
    implementation Dependencies.AndroidX.coreKTX

    testImplementation Dependencies.JUnit.junit
    androidTestImplementation Dependencies.Mockk.mockkAndroid
    androidTestImplementation Dependencies.Espresso.espressoCore
    androidTestImplementation Dependencies.Espresso.intents
    androidTestImplementation Dependencies.UIAutomator.uiAutomator
    androidTestImplementation Dependencies.Espresso.idlingResource
    androidTestImplementation Dependencies.AndroidX.testRunner
    androidTestImplementation Dependencies.AndroidX.testRules
    androidTestImplementation Dependencies.AndroidX.testExtJunit
    androidTestUtil Dependencies.AndroidX.testOrchestrator
    kaptAndroidTest Dependencies.Hilt.hiltAndroidCompiler
    kaptAndroidTest Dependencies.Hilt.hiltCompiler
    kaptTest Dependencies.Hilt.hiltAndroidCompiler
    implementation Dependencies.Espresso.idlingResource

    androidTestImplementation(Dependencies.Barista.barista) {
        exclude group: 'org.jetbrains.kotlin'
    }

    implementation Dependencies.VLC.libVLC
    implementation Dependencies.Google.gson
    implementation Dependencies.Hilt.hiltAndroid
    kapt Dependencies.Hilt.hiltAndroidCompiler
    kapt "org.jetbrains.kotlinx:kotlinx-metadata-jvm:0.5.0"
    //implementation Dependencies.Hilt.hiltViewModel
    kapt Dependencies.Hilt.hiltCompiler

    //Base repository
    implementation Dependencies.Base.androidCommons
    implementation Dependencies.Base.safeFleetUI
    implementation Dependencies.Base.authentication

    implementation Dependencies.SqlDelight.androidDriver
    implementation Dependencies.SqlDelight.sqlDelightDriver

    implementation Dependencies.Ktor.clientCore
    implementation Dependencies.Ktor.clientAndroid
    implementation Dependencies.Ktor.clientSerialization
    implementation Dependencies.Ktor.clientMock

    implementation Dependencies.DataStore.preferences

    implementation Dependencies.Auth0.jwtDecode
    implementation Dependencies.OpenId.appAuth

    implementation Dependencies.NewRelic.android

    implementation project(path: Modules.presentation)
    implementation project(path: Modules.data)
    implementation project(path: Modules.domain)
    implementation project(path: Modules.database)
    implementation project(path: Modules.body_cameras)
}

repositories {
    google()
}
