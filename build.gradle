buildscript {
    apply from: "classpath-versions.gradle"
    repositories {
        //mavenLocal()
        google()
        mavenCentral()
        maven {
            credentials {
                username = nexusUsername
                password = nexusPassword
            }
            url "https://nexus.vmaxlive.net/repository/maven-public/"
        }
    }
    configurations.maybeCreate('pitest')
    dependencies {
        classpath "com.android.tools.build:gradle:$tools_gradle_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarqube_version"
        classpath "org.jacoco:org.jacoco.core:$jacoco_version"
        classpath "pl.droidsonroids.gradle:gradle-pitest-plugin:$pitest_android_plugin_version"
        classpath "info.solidsoft.gradle.pitest:gradle-pitest-plugin:$pitest_plugin_version"
        pitest "org.pitest:pitest-junit5-plugin:$pitest_junit5_plugin_version"
        classpath "com.google.dagger:hilt-android-gradle-plugin:$hilt_version"
        classpath "com.squareup.sqldelight:gradle-plugin:$sqldelight_version"
        classpath "com.google.firebase:firebase-appdistribution-gradle:$firebase_app_distribution_version"
    }
}

plugins {
    id "org.sonarqube" version "2.7"
}

apply from: "sonar.gradle"

subprojects {
    apply from: "../ktlint.gradle"
    if (name.matches("data|presentation|domain|database")) {
        apply plugin: "jacoco"
        apply from: "../jacoco.gradle"
    }
    if (name.matches("data|domain|database")) {
        apply plugin: 'info.solidsoft.pitest'
    }
    if (name.matches("presentation")) {
        apply plugin: 'pl.droidsonroids.pitest'
    }
}

allprojects {
    repositories {
        //mavenLocal()
        google()
        mavenCentral()
        maven { url "https://jitpack.io" }
        maven {
            credentials {
                username = nexusUsername
                password = nexusPassword
            }
            url "https://nexus.vmaxlive.net/repository/maven-public/"
        }
    }
    configurations.all {
        resolutionStrategy {
            eachDependency { details ->
                if ('org.jacoco' == details.requested.group) {
                    details.useVersion "0.8.8"
                }
            }
        }
    }
}

task installGitHook(type: Copy) {
    from new File(rootProject.rootDir, 'pre-commit')
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0777
}

tasks.getByPath(':app:preBuild').dependsOn installGitHook

task clean(type: Delete) {
    delete rootProject.buildDir
}