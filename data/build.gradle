import dependencies.*

plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'jacoco'
    id 'dagger.hilt.android.plugin'
}

apply from: '../jacoco.gradle'
apply from: '../pitest-exceptions.gradle'

android {
    compileSdkVersion AppConfig.compileSdkVersion

    defaultConfig {
        minSdkVersion AppConfig.minSdkVersion
        targetSdkVersion AppConfig.targetSdkVersion
        versionCode AppConfig.buildVersion
        versionName AppConfig.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            debuggable true
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        animationsDisabled = true
        unitTests.all {
            useJUnitPlatform()
            jacoco {
                destinationFile = file("$buildDir/jacoco/testDebugUnitTest.exec")
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']
            }
        }
    }

    kotlinOptions {
        jvmTarget = AppConfig.jvmTarget
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.appcompat:appcompat:$app_compat_version"
    implementation "androidx.core:core-ktx:$ktx_version"
    testImplementation "junit:junit:$junit_version"

    //Material
    implementation "com.google.android.material:material:$android_material_version"

    //GSON
    implementation "com.google.code.gson:gson:$gson_version"

    // Junit5
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5_version"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:$junit5_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit5_version"

    //AndroidX test
    androidTestImplementation "androidx.test:runner:$androidx_test_version"
    androidTestImplementation "androidx.test:rules:$androidx_test_version"
    androidTestImplementation "androidx.test.ext:junit:$junit_ext_version"

    // Mockk
    testImplementation "io.mockk:mockk:$mockk_version"

    //Kotlin Coroutines
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutine_android_version"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutine_core_version"

    //Coroutines-test
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_test_version"

    //Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
    kapt "androidx.hilt:hilt-compiler:$hilt_jetpack_version"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$hilt_jetpack_version"
    kaptTest "com.google.dagger:hilt-android-compiler:$hilt_version"

    //external_hardware
    implementation 'com.safefleet.mobile:external-hardware:1.0.0-SNAPSHOT@jar'

    implementation project(path: Modules.domain)
}

pitest {
    //Add Inspection exclusions since IntelliJ is sending invalid warnings for pitest plugin
    //noinspection GrFinalVariableAccess,GroovyAccessibility
    targetClasses = ["com.lawmobile.data.*"]
    //noinspection GrFinalVariableAccess,GroovyAccessibility
    targetTests = ["com.lawmobile.data.*"]
    //noinspection GrFinalVariableAccess,GroovyAccessibility
    excludedClasses = pitestExclusions
}
