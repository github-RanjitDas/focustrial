import dependencies.AppConfig
import dependencies.Dependencies
import dependencies.Exclusions
import dependencies.Modules

plugins {
    id 'java-library'
    id 'kotlin'
    id 'kotlin-kapt'
    id 'com.squareup.sqldelight'
    id 'maven'
    //id 'maven-publish'
}

def artifactId = 'database'
def groupId = 'com.safefleet.lawmobile'
def versionVariant = "1.0.1"

if (!"$System.env.VARIANT".contains("RELEASE")) {
    versionVariant += "-SNAPSHOT"
}

check.dependsOn ktlint

sqldelight {
    Database {
        packageName = "com.lawmobile.database"
    }
}

task testDebugUnitTest {
    group = 'Verification'
    dependsOn test
}

task pitestDebug {
    group = 'Verification'
    dependsOn "pitest"
}

test {
    useJUnitPlatform()
    jacoco {
        destinationFile = file("$buildDir/jacoco/testDebugUnitTest.exec")
        includeNoLocationClasses = true
        excludes = ['jdk.internal.*']
    }
}

java {
    sourceCompatibility = AppConfig.jvmTarget
    targetCompatibility = AppConfig.jvmTarget
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation Dependencies.Kotlin.standardLibrary

    testImplementation Dependencies.JUnit.junit
    testImplementation Dependencies.JUnit5.jupiterApi
    testRuntimeOnly Dependencies.JUnit5.jupiterEngine
    testImplementation Dependencies.JUnit5.jupiterParams
    testImplementation Dependencies.Mockk.mockk

    implementation project(path: Modules.data)
}

pitest {
    //Add Inspection exclusions since IntelliJ is sending invalid warnings for pitest plugin
    //noinspection GrFinalVariableAccess,GroovyAccessibility
    targetClasses = ["com.lawmobile.database.*"]
    //noinspection GrFinalVariableAccess,GroovyAccessibility
    targetTests = ["com.lawmobile.database.*"]
    //noinspection GrFinalVariableAccess,GroovyAccessibility
    excludedClasses = Exclusions.pitest
    testPlugin.set('junit5')
    threads.set(Runtime.getRuntime().availableProcessors())
    outputFormats.set(['XML', 'HTML'])
    enableDefaultIncrementalAnalysis.set(true)
    timestampedReports.set(false)
}

// comment the below code when using maven local
def nexusRepositoryUrl
if (!versionVariant.contains("SNAPSHOT")) {
    nexusRepositoryUrl = "${nexusUrl}/repository/maven-releases/"
} else {
    nexusRepositoryUrl = "${nexusUrl}/repository/maven-snapshots/"
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: nexusRepositoryUrl) {
                authentication(userName: nexusUsername, password: nexusPassword)
                pom.groupId = groupId
                pom.artifactId = artifactId
                pom.version = versionVariant
            }
        }
    }
}

//Uncomment the below code when using maven local
/*project.afterEvaluate {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                setGroupId groupId
                setArtifactId artifactId
                version versionVariant

                from components.java
            }
        }
    }
}
repositories {
    mavenCentral()
}*/